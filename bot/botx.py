import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

API_TOKEN = "7530716464:AAEEnqZLchL5GGrNYOAocqNpi8-8loaaSbY"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHANNEL_USERNAME = "@CorteizProjects"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ username —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = 886103881  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
STICKER_ID = "CAACAgIAAxkBAAEMgApnrNqFHMQqHOPwDMetOA5iK3MXeQACJi4AAguccEj5Jpxf8oKEGDYE"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ ID –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
reviews = []

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class AddReviewState(StatesGroup):
    waiting_for_media = State()  # –û–∂–∏–¥–∞–µ–º –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–∏–¥–µ–æ, –≥–∏—Ñ–∫–∏)
    waiting_for_text = State()  # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã¬ª
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
check_subscription_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")
)

async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await check_subscription(message.from_user.id)

    if not is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        await message.reply(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç.\n @CorteizProjects",
            reply_markup=check_subscription_keyboard
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        await bot.send_sticker(message.chat.id, STICKER_ID)
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üëá", reply_markup=main_keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    is_subscribed = await check_subscription(callback.from_user.id)
    
    if is_subscribed:
        await callback.message.answer("‚úîÔ∏è –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        await callback.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    
    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –º–µ–¥–∏–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
@dp.message_handler(lambda message: message.text == "üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
async def show_review(message: types.Message):
    if not reviews:
        await message.reply("‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ–±–∞–≤—è—Ç –∏—Ö!")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
    media_files, review_text = reviews[0]
    next_index = 1 % len(reviews)

    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"show_review_{next_index}")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ –æ–¥–Ω–æ–º—É
    for media in media_files:
        if isinstance(media, types.InputMediaPhoto):
            await bot.send_photo(message.chat.id, media.media)
        elif isinstance(media, types.InputMediaVideo):
            await bot.send_video(message.chat.id, media.media)
        elif isinstance(media, types.InputMediaAnimation):
            await bot.send_animation(message.chat.id, media.media)

    await bot.send_message(message.chat.id, review_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("show_review_"))
async def show_next_review(callback: types.CallbackQuery):
    index = int(callback.data.split("_")[2])

    if not reviews:
        await callback.answer("‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ–±–∞–≤—è—Ç –∏—Ö!", show_alert=True)
        return

    index = index % len(reviews)  # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º—Å—è –ø–æ –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞
    media_files, review_text = reviews[index]
    next_index = (index + 1) % len(reviews)

    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"show_review_{next_index}")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø–æ –æ–¥–Ω–æ–º—É
    for media in media_files:
        if isinstance(media, types.InputMediaPhoto):
            await bot.send_photo(callback.message.chat.id, media.media)
        elif isinstance(media, types.InputMediaVideo):
            await bot.send_video(callback.message.chat.id, media.media)
        elif isinstance(media, types.InputMediaAnimation):
            await bot.send_animation(callback.message.chat.id, media.media)

    await bot.send_message(callback.message.chat.id, review_text, reply_markup=keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ ‚Äî –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
@dp.message_handler(Command("add_review"))
async def add_review_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å–µ–π—á–∞—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚åö")
        return
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞ (–¥–æ 3 –º–µ–¥–∏–∞).")
    await AddReviewState.waiting_for_media.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–∏–¥–µ–æ, –≥–∏—Ñ–∫–∏)
@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.ANIMATION], state=AddReviewState.waiting_for_media)
async def process_media(message: types.Message, state: FSMContext):
    media_files = []
    # –ï—Å–ª–∏ –º–µ–¥–∏–∞ - —Ñ–æ—Ç–æ
    if message.content_type == types.ContentType.PHOTO:
        media_files.append(types.InputMediaPhoto(message.photo[-1].file_id))
    # –ï—Å–ª–∏ –º–µ–¥–∏–∞ - –≤–∏–¥–µ–æ
    elif message.content_type == types.ContentType.VIDEO:
        media_files.append(types.InputMediaVideo(message.video.file_id))
    # –ï—Å–ª–∏ –º–µ–¥–∏–∞ - –≥–∏—Ñ–∫–∞
    elif message.content_type == types.ContentType.ANIMATION:
        media_files.append(types.InputMediaAnimation(message.animation.file_id))

    if len(media_files) < 3:  # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –º–µ–Ω—å—à–µ 3
        await state.update_data(media_files=media_files)
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
        await AddReviewState.waiting_for_text.set()

    else:  # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –±–æ–ª–µ–µ 3
        await message.reply("‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ ‚Äî 3. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 3 –∏–ª–∏ –º–µ–Ω—å—à–µ.")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.message_handler(state=AddReviewState.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    media_files = data["media_files"]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Å–ø–∏—Å–æ–∫
    reviews.append((media_files, text))
    await message.reply("‚úîÔ∏è –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞!")

    await state.finish()

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
